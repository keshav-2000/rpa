#####Develop a secure messaging application where users can exchange messages securely using RSA encryption Implement a mechanism for generating RSA key pairs and encryptingdecrypting messages.
# Install cryptography if not already installed
!pip install cryptography

from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
import base64

# Function to generate RSA key pairs
def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    return private_key, public_key

# Function to serialize keys
def serialize_keys(private_key, public_key):
    priv_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    pub_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    return priv_pem, pub_pem

# Encrypt a message using public key
def encrypt_message(public_key, message):
    encrypted = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return base64.b64encode(encrypted).decode()

# Decrypt a message using private key
def decrypt_message(private_key, encrypted_message):
    decrypted = private_key.decrypt(
        base64.b64decode(encrypted_message),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode()

# Simulating two users: Alice and Bob
print("Generating RSA key pairs for Alice and Bob...")
alice_private, alice_public = generate_rsa_key_pair()
bob_private, bob_public = generate_rsa_key_pair()

# Alice sends a message to Bob
message_from_alice = "Hi Bob, this is Alice. The message is secure!"
print("\nOriginal message from Alice:", message_from_alice)

encrypted_message = encrypt_message(bob_public, message_from_alice)
print("Encrypted message (sent to Bob):", encrypted_message)

# Bob decrypts the message
decrypted_message = decrypt_message(bob_private, encrypted_message)
print("Decrypted message by Bob:", decrypted_message)



######P2 Allow users to create multiple transactions and display them in an organised format
!pip install pandas

import pandas as pd

transactions = []

def create_transaction(sender, receiver, amount, description=""):
    transaction = {
        "Sender": sender,
        "Receiver": receiver,
        "Amount": amount,
        "Description": description
    }
    transactions.append(transaction)
    print("‚úÖ Transaction recorded successfully!")


def display_transactions():
    if transactions:
        df = pd.DataFrame(transactions)
        print("\nüìÑ All Transactions:")
        display(df)
    else:
        print("‚ö†Ô∏è No transactions found.")

# Example usage
create_transaction("Alice", "Bob", 150, "Payment for services")
create_transaction("Bob", "Charlie", 75, "Dinner split")
create_transaction("Charlie", "Alice", 25, "Coffee refund")

# Display all transactions
display_transactions()




#####P3 Create a Python class named Transaction with attributes for sender, receiver, and amount. Implement a method within the class to transfer money from the sender's account to the receiver's account.
# Simulate user accounts with balances
accounts = {
    "Alice": 500,
    "Bob": 300,
    "Charlie": 200
}

# Transaction class definition
class Transaction:
    def __init__(self, sender, receiver, amount):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount

    def transfer(self):
        # Check if users exist
        if self.sender not in accounts or self.receiver not in accounts:
            print("‚ùå Either sender or receiver account doesn't exist.")
            return

        # Check for sufficient funds
        if accounts[self.sender] < self.amount:
            print(f"‚ùå Insufficient funds in {self.sender}'s account.")
            return

        # Perform transfer
        accounts[self.sender] -= self.amount
        accounts[self.receiver] += self.amount
        print(f"‚úÖ {self.amount} transferred from {self.sender} to {self.receiver}.")

# Example usage
print("üí∞ Initial account balances:", accounts)

# Create transactions
t1 = Transaction("Alice", "Bob", 100)
t1.transfer()

t2 = Transaction("Bob", "Charlie", 50)
t2.transfer()

t3 = Transaction("Charlie", "Alice", 300)  # This should fail due to insufficient funds
t3.transfer()

print("\nüíº Final account balances:", accounts)




####P4 Implement a function to add new blocks to the miner and dump the blockchain.
import hashlib
import time
import json

# Block class
class Block:
    def __init__(self, index, previous_hash, timestamp, data, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{json.dumps(self.data)}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

# Blockchain class
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4  # Number of leading zeros in the hash

    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def mine_block(self, data):
        previous_block = self.get_latest_block()
        index = previous_block.index + 1
        timestamp = time.time()
        nonce = 0

        print(f"‚õèÔ∏è Mining block #{index}...")

        new_block = Block(index, previous_block.hash, timestamp, data, nonce)
        while not new_block.hash.startswith('0' * self.difficulty):
            new_block.nonce += 1
            new_block.hash = new_block.calculate_hash()

        self.chain.append(new_block)
        print(f"‚úÖ Block #{index} mined: {new_block.hash}")

    def dump_chain(self):
        print("\nüì¶ Blockchain Dump:")
        for block in self.chain:
            print({
                'Index': block.index,
                'Previous Hash': block.previous_hash,
                'Timestamp': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(block.timestamp)),
                'Data': block.data,
                'Nonce': block.nonce,
                'Hash': block.hash
            })

# Create the blockchain
my_blockchain = Blockchain()

# Add (mine) blocks
my_blockchain.mine_block({"sender": "Alice", "receiver": "Bob", "amount": 50})
my_blockchain.mine_block({"sender": "Bob", "receiver": "Charlie", "amount": 25})
my_blockchain.mine_block({"sender": "Charlie", "receiver": "Alice", "amount": 10})

# Dump the entire blockchain
my_blockchain.dump_chain()




#####P5 Write a python program to demonstrate mining.
import hashlib
import time

# Define the mining function
def mine_block(block_data, difficulty):
    prefix_str = '0' * difficulty
    nonce = 0
    start_time = time.time()

    print("‚õèÔ∏è Starting mining...")
    while True:
        text = f"{block_data}{nonce}"
        hash_result = hashlib.sha256(text.encode()).hexdigest()
        if hash_result.startswith(prefix_str):
            end_time = time.time()
            print(f"‚úÖ Block mined successfully!")
            print(f"üî¢ Nonce: {nonce}")
            print(f"üîê Hash: {hash_result}")
            print(f"‚è±Ô∏è Time taken: {end_time - start_time:.2f} seconds")
            break
        nonce += 1

# Example usage
block_data = "Alice pays Bob 10 BTC"
difficulty = 4  # Increase for higher difficulty

mine_block(block_data, difficulty)





#####P6 Write a Solidity program that demonstrates various types of functions including regular functions, view functions, pure functions, and the fallback function.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract FunctionTypesDemo {

    uint public counter = 0;

    // üîÅ Regular function: modifies the state
    function increment() public {
        counter += 1;
    }

    // üëÄ View function: reads state, doesn't modify
    function getCounter() public view returns (uint) {
        return counter;
    }

    // üßÆ Pure function: no access to state
    function add(uint a, uint b) public pure returns (uint) {
        return a + b;
    }

    // üí∞ Receive function: triggered when contract receives Ether with no data
    receive() external payable {
        // You could add logic here for receiving ETH
    }

    // üõ†Ô∏è Fallback function: triggered when no other function matches
    fallback() external payable {
        // Fallback logic can go here
    }
    
}





#####P7 Write a Solidity program that demonstrates function overloading, mathematical functions, and cryptographic functions.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PracticalDemo {

    // üëâ Function Overloading Example
    function getResult(uint a, uint b, uint c) public pure returns (uint) {
        return a + b + c;
    }

    // üßÆ Mathematical Functions
    function mathOps(uint a, uint b) public pure returns (
        uint sum,
        uint diff,
        uint prod,
        uint quotient,
        uint mod,
        uint power
    ) {
        require(b != 0, "Division by zero"); // avoids divide-by-zero error
        sum = a + b;
        diff = a - b;
        prod = a * b;
        quotient = a / b;
        mod = a % b;
        power = a ** b;
    }

    // üîê Cryptographic Hash Functions

    function hashKeccak256(string memory input) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(input));
    }

    function hashSha256(string memory input) public pure returns (bytes32) {
        return sha256(abi.encodePacked(input));
    }

    function hashRipemd160(string memory input) public pure returns (bytes20) {
        return ripemd160(abi.encodePacked(input));
    }
}





#####P8 Write a Solidity program that demonstrates various features including contracts, inheritance, constructors, abstract contracts, interfaces.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Interface Definition
interface ICalculator {
    function add(uint a, uint b) external pure returns (uint);
    function subtract(uint a, uint b) external pure returns (uint);
}

/// @title Abstract Contract for Shared Math Logic
abstract contract MathBase {
    // Abstract function (must be implemented)
    function multiply(uint a, uint b) public pure virtual returns (uint);

    // Concrete function (optional override)
    function divide(uint a, uint b) public pure returns (uint) {
        require(b != 0, "Cannot divide by zero");
        return a / b;
    }
}

/// @title Main Calculator Contract
/// @notice Implements interface and inherits from abstract base
contract Calculator is ICalculator, MathBase {
    address public owner;

    // Constructor
    constructor() {
        owner = msg.sender;
    }

    // Interface Implementations
    function add(uint a, uint b) external pure override returns (uint) {
        return a + b;
    }

    function subtract(uint a, uint b) external pure override returns (uint) {
        return a - b;
    }

    // Implementing abstract method
    function multiply(uint a, uint b) public pure override returns (uint) {
        return a * b;
    }

    // Inherited divide() method from MathBase is also available
}

/// @title Advanced Calculator Inheriting Calculator
contract AdvancedCalculator is Calculator {
    function power(uint base, uint exponent) public pure returns (uint result) {
        result = 1;
        for (uint i = 0; i < exponent; i++) {
            result *= base;
        }
    }
}





#####P9 Write a Solidity program that demonstrates use of libraries, assembly, events, and error handling.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title MathLib - A library with reusable math functions
library MathLib {
    function square(uint x) internal pure returns (uint) {
        return x * x;
    }

    function cube(uint x) internal pure returns (uint) {
        return x * x * x;
    }
}

/// @title Contract demonstrating library, assembly, events, and error handling
contract FeaturesDemo {
    using MathLib for uint;

    address public owner;

    // Event to log computations
    event Computed(address indexed user, string operation, uint input, uint result);

    // Custom error for unauthorized access
    error NotOwner(address caller);

    constructor() {
        owner = msg.sender;
    }

    /// @notice Uses MathLib and emits event
    function calculateSquare(uint value) external returns (uint) {
        uint result = value.square();
        emit Computed(msg.sender, "square", value, result);
        return result;
    }

    /// @notice Uses inline assembly to double a value
    function doubleValue(uint x) public pure returns (uint result) {
        assembly {
            result := mul(x, 2)
        }
    }

    /// @notice Restricted to owner, demonstrates custom error
    function privilegedAction() external view {
        if (msg.sender != owner) {
            revert NotOwner(msg.sender);
        }
        // privileged logic here
    }

    /// @notice Demonstrates require, assert, and emit
    function safeDivide(uint a, uint b) external returns (uint result) {
        require(b != 0, "Division by zero");

        result = a / b;

        // assert is used for internal checks
        assert(result * b <= a); // This should always hold

        emit Computed(msg.sender, "divide", a, result);
    }
}





#####write a program in solidity to overload bitwise AND operator and bitwise OR operator for (2,3,4) parameters considering those 4 parameters from todays date in the for of¬†DD,¬†MM,¬†YY,¬†YY
write a program in solidity to overload bitwise AND operator and bitwise OR operator for (2,3,4) parameters considering those 4 parameters from todays date in the for of¬†DD,¬†MM,¬†YY,¬†YY

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BitwiseOverload {

    // Bitwise AND for 2 parameters
    function and2(uint a, uint b) public pure returns (uint) {
        return a & b;
    }

    // Bitwise AND for 3 parameters
    function and3(uint a, uint b, uint c) public pure returns (uint) {
        return a & b & c;
    }

    // Bitwise AND for 4 parameters
    function and4(uint a, uint b, uint c, uint d) public pure returns (uint) {
        return a & b & c & d;
    }

    // Bitwise OR for 2 parameters
    function or2(uint a, uint b) public pure returns (uint) {
        return a | b;
    }

    // Bitwise OR for 3 parameters
    function or3(uint a, uint b, uint c) public pure returns (uint) {
        return a | b | c;
    }

    // Bitwise OR for 4 parameters
    function or4(uint a, uint b, uint c, uint d) public pure returns (uint) {
        return a | b | c | d;
    }
}




#####Write a solidity program to determine if the first number is greater than the 2nd number than find the and operation of the numbers else find the OR operation hence
Write a solidity program to determine if the first number is greater than the 2nd number than find the and operation of the numbers else find the OR operation hence
find the product of the 2 numbers with the results of the operation also ensure that if any number is 0 than it should revert the transaction with the message
"One number is zero, kindly enter both positive number"

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BitwiseComparison {
    uint public num1;
    uint public num2;
    uint public result;    // AND or OR result
    uint public product;   // Final product

    // Function to set the numbers and perform logic
    function setNumbers(uint _num1, uint _num2) external {
        require(_num1 != 0 && _num2 != 0, "One number is zero, kindly enter both positive number");

        num1 = _num1;
        num2 = _num2;

        if (num1 > num2) {
            result = num1 & num2; // Perform AND
        } else {
            result = num1 | num2; // Perform OR
        }

        product = num1 * num2 * result; // Final product with result of AND/OR
    }

    // Optional helper to get all results at once
    function getResults() external view returns (uint, uint, uint, uint) {
        return (num1, num2, result, product);
    }
}








##### Write a solidity program to take 10 numbers from the user and place it in an arrayand perform AND opeeratiion on the odd postion numbers (1,3,5,7,9) and OR operation on remaining numbers and hence perform multiplication of the results and also determine using a smart contract whether the results of AND operation , OR operation and the product
are part of array or not.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BitwiseOperations {
    uint[10] public numbers;
    uint public andResult;
    uint public orResult;
    uint public product;

    // Set the 10 numbers
    function setNumbers(uint[10] calldata _numbers) external {
        for (uint i = 0; i < 10; i++) {
            numbers[i] = _numbers[i];
        }

        computeResults();
    }

    // Perform AND, OR operations and multiplication
    function computeResults() internal {
        andResult = numbers[1]; // Start with index 0 (1st position)
        for (uint i = 3; i < 10; i += 2) {
            andResult &= numbers[i];
        }

        orResult = numbers[0]; // Start with index 1 (2nd position)
        for (uint i = 2; i < 10; i += 2) {
            orResult |= numbers[i];
        }

        product = andResult * orResult;
    }

    // Check if a number exists in the array
    function existsInArray(uint value) public view returns (bool) {
        for (uint i = 0; i < 10; i++) {
            if (numbers[i] == value) {
                return true;
            }
        }
        return false;
    }

    // Check if the AND result is in the array
    function isAndResultInArray() external view returns (bool) {
        return existsInArray(andResult);
    }

    // Check if the OR result is in the array
    function isOrResultInArray() external view returns (bool) {
        return existsInArray(orResult);
    }

    // Check if the product is in the array
    function isProductInArray() external view returns (bool) {
        return existsInArray(product);
    }
}





#####AddMod And Mul mod For date of Birth
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ModCalculator {
    // Constants from DOB 05/07/2001
    uint8 constant DD = 5;
    uint8 constant MM = 7;
    uint8 constant YY = 1;

    function compute(uint num1, uint num2) public pure returns (uint addModResult, uint mulModResult) {
        // Perform bitwise AND on DD and MM for addmod
        uint mod1 = DD & MM; // 5 & 7 = 5

        // Perform bitwise OR on YY and YY for mulmod
        uint mod2 = YY | YY; // 1 | 1 = 1

        // Avoid modulo by zero
        require(mod1 != 0 && mod2 != 0, "Modulo cannot be zero");

        // Calculate addmod and mulmod
        addModResult = addmod(num1, num2, mod1);
        mulModResult = mulmod(num1, num2, mod2);
    }
}





#####AddMod And Mulmod
write a program in solidity to determine if the 1st no. is greater then the 2nd no. then find AND operation of the numbers and also find Addmod with the result else find the OR operation and the product of the 2 no. and perform Mulmod of the 2 no. with the result also ensure that is any one no. is zero then display the message one no. is zero kindly enter both¬†positive¬†no.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NumberOperations {

    // Struct to hold two results with labels (optional readability)
    struct OperationResult {
        string operation1;
        uint value1;
        string operation2;
        uint value2;
    }

    // Function to perform operations and return results
    function performOperations(uint num1, uint num2)
        public
        pure
        returns (string memory operation1, uint value1, string memory operation2, uint value2)
    {
        // Check for zero values
        if (num1 == 0 || num2 == 0) {
            return ("One number is zero. Kindly enter both positive numbers.", 0, "", 0);
        }

        if (num1 > num2) {
            uint andResult = num1 & num2;
            uint addmodResult = addmod(andResult, num1, num2);
            return ("AND Operation Result", andResult, "Addmod Result", addmodResult);
        } else {
            uint orResult = num1 | num2;
            uint mulmodResult = mulmod(num1, num2, orResult);
            return ("OR Operation Result", orResult, "Mulmod Result", mulmodResult);
        }
    }
}
